from PyQt5 import QtCore, QtGui, QtWidgets
from defectTypes.particle_defect import Defect
from multi_processor import MultiProcessor
import reader, time

class Ui_MainWindow(object):
	def setupUi(self, MainWindow):
		MainWindow.setObjectName("MainWindow")
		MainWindow.resize(1920, 1081)
		self.centralwidget = QtWidgets.QWidget(MainWindow)
		self.centralwidget.setEnabled(True)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
		self.centralwidget.setSizePolicy(sizePolicy)
		self.centralwidget.setObjectName("centralwidget")
		self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
		self.horizontalLayout.setSpacing(2)
		self.horizontalLayout.setObjectName("horizontalLayout")
		self.verticalLayout_2 = QtWidgets.QVBoxLayout()
		self.verticalLayout_2.setObjectName("verticalLayout_2")
		self.label_3 = QtWidgets.QLabel(self.centralwidget)
		self.label_3.setObjectName("label_3")
		self.verticalLayout_2.addWidget(self.label_3)
		self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_3.setObjectName("horizontalLayout_3")
		self.filename_input = QtWidgets.QTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.filename_input.sizePolicy().hasHeightForWidth())
		self.filename_input.setSizePolicy(sizePolicy)
		self.filename_input.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
		self.filename_input.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
		self.filename_input.setTabChangesFocus(True)
		self.filename_input.setReadOnly(True)
		self.filename_input.setObjectName("filename_input")
		self.horizontalLayout_3.addWidget(self.filename_input)
		self.filename_browse = QtWidgets.QPushButton(self.centralwidget)
		self.filename_browse.setEnabled(True)
		self.filename_browse.setObjectName("filename_browse")
		self.horizontalLayout_3.addWidget(self.filename_browse)
		self.verticalLayout_2.addLayout(self.horizontalLayout_3)
		spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
		self.verticalLayout_2.addItem(spacerItem)
		self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_7.setObjectName("horizontalLayout_7")
		self.label_5 = QtWidgets.QLabel(self.centralwidget)
		self.label_5.setObjectName("label_5")
		self.horizontalLayout_7.addWidget(self.label_5)
		self.defect_dropdown = QtWidgets.QComboBox(self.centralwidget)
		self.defect_dropdown.setObjectName("defect_dropdown")
		self.horizontalLayout_7.addWidget(self.defect_dropdown)
		self.horizontalLayout_7.setStretch(0, 1)
		self.horizontalLayout_7.setStretch(1, 6)
		self.verticalLayout_2.addLayout(self.horizontalLayout_7)
		spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
		self.verticalLayout_2.addItem(spacerItem1)
		self.input_parameters_vlayout = QtWidgets.QVBoxLayout()
		self.input_parameters_vlayout.setObjectName("input_parameters_vlayout")
		self.label_14 = QtWidgets.QLabel(self.centralwidget)
		self.label_14.setObjectName("label_14")
		self.input_parameters_vlayout.addWidget(self.label_14)
		self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_8.setObjectName("horizontalLayout_8")
		self.label_15 = QtWidgets.QLabel(self.centralwidget)
		self.label_15.setMinimumSize(QtCore.QSize(0, 31))
		self.label_15.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		self.label_15.setObjectName("label_15")
		self.horizontalLayout_8.addWidget(self.label_15)
		self.layer_dropdown = QtWidgets.QComboBox(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.layer_dropdown.sizePolicy().hasHeightForWidth())
		self.layer_dropdown.setSizePolicy(sizePolicy)
		self.layer_dropdown.setObjectName("layer_dropdown")
		self.horizontalLayout_8.addWidget(self.layer_dropdown)
		self.horizontalLayout_8.setStretch(0, 1)
		self.horizontalLayout_8.setStretch(1, 6)
		self.input_parameters_vlayout.addLayout(self.horizontalLayout_8)
		self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_9.setObjectName("horizontalLayout_9")
		self.label_13 = QtWidgets.QLabel(self.centralwidget)
		self.label_13.setMinimumSize(QtCore.QSize(0, 31))
		self.label_13.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		self.label_13.setObjectName("label_13")
		self.horizontalLayout_9.addWidget(self.label_13)
		self.density_mean_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.density_mean_input.sizePolicy().hasHeightForWidth())
		self.density_mean_input.setSizePolicy(sizePolicy)
		self.density_mean_input.setMinimumSize(QtCore.QSize(0, 31))
		self.density_mean_input.setTabChangesFocus(True)
		self.density_mean_input.setObjectName("density_mean_input")
		self.horizontalLayout_9.addWidget(self.density_mean_input)
		self.density_stddev_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.density_stddev_input.sizePolicy().hasHeightForWidth())
		self.density_stddev_input.setSizePolicy(sizePolicy)
		self.density_stddev_input.setMinimumSize(QtCore.QSize(0, 31))
		self.density_stddev_input.setTabChangesFocus(True)
		self.density_stddev_input.setObjectName("density_stddev_input")
		self.horizontalLayout_9.addWidget(self.density_stddev_input)
		self.horizontalLayout_9.setStretch(0, 1)
		self.horizontalLayout_9.setStretch(1, 3)
		self.horizontalLayout_9.setStretch(2, 3)
		self.input_parameters_vlayout.addLayout(self.horizontalLayout_9)
		self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_13.setObjectName("horizontalLayout_13")
		self.label_16 = QtWidgets.QLabel(self.centralwidget)
		self.label_16.setMinimumSize(QtCore.QSize(0, 31))
		self.label_16.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		self.label_16.setObjectName("label_16")
		self.horizontalLayout_13.addWidget(self.label_16)
		self.size_mean_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.size_mean_input.sizePolicy().hasHeightForWidth())
		self.size_mean_input.setSizePolicy(sizePolicy)
		self.size_mean_input.setMinimumSize(QtCore.QSize(0, 31))
		self.size_mean_input.setTabChangesFocus(True)
		self.size_mean_input.setObjectName("size_mean_input")
		self.horizontalLayout_13.addWidget(self.size_mean_input)
		self.size_stddev_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.size_stddev_input.sizePolicy().hasHeightForWidth())
		self.size_stddev_input.setSizePolicy(sizePolicy)
		self.size_stddev_input.setMinimumSize(QtCore.QSize(0, 31))
		self.size_stddev_input.setTabChangesFocus(True)
		self.size_stddev_input.setObjectName("size_stddev_input")
		self.horizontalLayout_13.addWidget(self.size_stddev_input)
		self.horizontalLayout_13.setStretch(0, 1)
		self.horizontalLayout_13.setStretch(1, 3)
		self.horizontalLayout_13.setStretch(2, 3)
		self.input_parameters_vlayout.addLayout(self.horizontalLayout_13)
		self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_14.setObjectName("horizontalLayout_14")
		self.label_17 = QtWidgets.QLabel(self.centralwidget)
		self.label_17.setMinimumSize(QtCore.QSize(0, 31))
		self.label_17.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		self.label_17.setObjectName("label_17")
		self.horizontalLayout_14.addWidget(self.label_17)
		self.vertices_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.vertices_input.sizePolicy().hasHeightForWidth())
		self.vertices_input.setSizePolicy(sizePolicy)
		self.vertices_input.setMinimumSize(QtCore.QSize(0, 31))
		self.vertices_input.setTabChangesFocus(True)
		self.vertices_input.setObjectName("vertices_input")
		self.horizontalLayout_14.addWidget(self.vertices_input)
		self.horizontalLayout_14.setStretch(0, 1)
		self.horizontalLayout_14.setStretch(1, 6)
		self.input_parameters_vlayout.addLayout(self.horizontalLayout_14)
		self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_10.setObjectName("horizontalLayout_10")
		self.label = QtWidgets.QLabel(self.centralwidget)
		self.label.setMinimumSize(QtCore.QSize(0, 31))
		self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		self.label.setObjectName("label")
		self.horizontalLayout_10.addWidget(self.label)
		self.angle_variance_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.angle_variance_input.sizePolicy().hasHeightForWidth())
		self.angle_variance_input.setSizePolicy(sizePolicy)
		self.angle_variance_input.setMinimumSize(QtCore.QSize(0, 31))
		self.angle_variance_input.setTabChangesFocus(True)
		self.angle_variance_input.setObjectName("angle_variance_input")
		self.horizontalLayout_10.addWidget(self.angle_variance_input)
		self.horizontalLayout_10.setStretch(0, 1)
		self.horizontalLayout_10.setStretch(1, 6)
		self.input_parameters_vlayout.addLayout(self.horizontalLayout_10)
		self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_15.setObjectName("horizontalLayout_15")
		self.label_18 = QtWidgets.QLabel(self.centralwidget)
		self.label_18.setMinimumSize(QtCore.QSize(0, 31))
		self.label_18.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		self.label_18.setObjectName("label_18")
		self.horizontalLayout_15.addWidget(self.label_18)
		self.curviness_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.curviness_input.sizePolicy().hasHeightForWidth())
		self.curviness_input.setSizePolicy(sizePolicy)
		self.curviness_input.setMinimumSize(QtCore.QSize(0, 31))
		self.curviness_input.setTabChangesFocus(True)
		self.curviness_input.setObjectName("curviness_input")
		self.horizontalLayout_15.addWidget(self.curviness_input)
		self.curviness_slider = QtWidgets.QSlider(self.centralwidget)
		self.curviness_slider.setOrientation(QtCore.Qt.Horizontal)
		self.curviness_slider.setObjectName("curviness_slider")
		self.horizontalLayout_15.addWidget(self.curviness_slider)
		self.horizontalLayout_15.setStretch(0, 1)
		self.horizontalLayout_15.setStretch(1, 1)
		self.horizontalLayout_15.setStretch(2, 5)
		self.input_parameters_vlayout.addLayout(self.horizontalLayout_15)
		self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_16.setObjectName("horizontalLayout_16")
		self.label_19 = QtWidgets.QLabel(self.centralwidget)
		self.label_19.setMinimumSize(QtCore.QSize(0, 31))
		self.label_19.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		self.label_19.setObjectName("label_19")
		self.horizontalLayout_16.addWidget(self.label_19)
		self.blur_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.blur_input.sizePolicy().hasHeightForWidth())
		self.blur_input.setSizePolicy(sizePolicy)
		self.blur_input.setMinimumSize(QtCore.QSize(0, 31))
		self.blur_input.setTabChangesFocus(True)
		self.blur_input.setObjectName("blur_input")
		self.horizontalLayout_16.addWidget(self.blur_input)
		self.horizontalLayout_16.setStretch(0, 1)
		self.horizontalLayout_16.setStretch(1, 6)
		self.input_parameters_vlayout.addLayout(self.horizontalLayout_16)
		self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_11.setObjectName("horizontalLayout_11")
		self.label_2 = QtWidgets.QLabel(self.centralwidget)
		self.label_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		self.label_2.setObjectName("label_2")
		self.horizontalLayout_11.addWidget(self.label_2)
		self.color_input = QtWidgets.QPushButton(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.color_input.sizePolicy().hasHeightForWidth())
		self.color_input.setSizePolicy(sizePolicy)
		self.color_input.setStyleSheet("background-color: black")
		self.color_input.setText("")
		self.color_input.setObjectName("color_input")
		self.horizontalLayout_11.addWidget(self.color_input)
		self.horizontalLayout_11.setStretch(0, 1)
		self.horizontalLayout_11.setStretch(1, 6)
		self.input_parameters_vlayout.addLayout(self.horizontalLayout_11)
		self.verticalLayout_2.addLayout(self.input_parameters_vlayout)
		spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
		self.verticalLayout_2.addItem(spacerItem2)
		self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_4.setObjectName("horizontalLayout_4")
		self.label_6 = QtWidgets.QLabel(self.centralwidget)
		self.label_6.setObjectName("label_6")
		self.horizontalLayout_4.addWidget(self.label_6)
		self.invalid_parameters_error = QtWidgets.QLabel(self.centralwidget)
		self.invalid_parameters_error.setEnabled(True)
		font = QtGui.QFont()
		font.setBold(True)
		font.setWeight(75)
		self.invalid_parameters_error.setFont(font)
		self.invalid_parameters_error.setStyleSheet("QLabel { color : red; }")
		self.invalid_parameters_error.setText("")
		self.invalid_parameters_error.setScaledContents(False)
		self.invalid_parameters_error.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		self.invalid_parameters_error.setObjectName("invalid_parameters_error")
		self.horizontalLayout_4.addWidget(self.invalid_parameters_error)
		self.preview_button = QtWidgets.QPushButton(self.centralwidget)
		self.preview_button.setEnabled(False)
		self.preview_button.setObjectName("preview_button")
		self.horizontalLayout_4.addWidget(self.preview_button)
		self.clear_preview_button = QtWidgets.QPushButton(self.centralwidget)
		self.clear_preview_button.setEnabled(False)
		self.clear_preview_button.setObjectName("clear_preview_button")
		self.horizontalLayout_4.addWidget(self.clear_preview_button)
		self.toggle_accuracy_button = QtWidgets.QPushButton(self.centralwidget)
		self.toggle_accuracy_button.setObjectName("toggle_accuracy_button")
		self.horizontalLayout_4.addWidget(self.toggle_accuracy_button)
		self.toggle_bbox_button = QtWidgets.QPushButton(self.centralwidget)
		self.toggle_bbox_button.setCheckable(True)
		self.toggle_bbox_button.setObjectName("toggle_bbox_button")
		self.horizontalLayout_4.addWidget(self.toggle_bbox_button)
		self.horizontalLayout_4.setStretch(0, 1)
		self.horizontalLayout_4.setStretch(1, 4)
		self.horizontalLayout_4.setStretch(2, 4)
		self.horizontalLayout_4.setStretch(3, 4)
		self.horizontalLayout_4.setStretch(4, 1)
		self.horizontalLayout_4.setStretch(5, 1)
		self.verticalLayout_2.addLayout(self.horizontalLayout_4)
		spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
		self.verticalLayout_2.addItem(spacerItem3)
		self.label_7 = QtWidgets.QLabel(self.centralwidget)
		self.label_7.setObjectName("label_7")
		self.verticalLayout_2.addWidget(self.label_7)
		self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_2.setObjectName("horizontalLayout_2")
		self.gen_1_button = QtWidgets.QPushButton(self.centralwidget)
		self.gen_1_button.setObjectName("gen_1_button")
		self.horizontalLayout_2.addWidget(self.gen_1_button)
		self.gen_5_button = QtWidgets.QPushButton(self.centralwidget)
		self.gen_5_button.setObjectName("gen_5_button")
		self.horizontalLayout_2.addWidget(self.gen_5_button)
		self.gen_10_button = QtWidgets.QPushButton(self.centralwidget)
		self.gen_10_button.setObjectName("gen_10_button")
		self.horizontalLayout_2.addWidget(self.gen_10_button)
		self.gen_100_button = QtWidgets.QPushButton(self.centralwidget)
		self.gen_100_button.setObjectName("gen_100_button")
		self.horizontalLayout_2.addWidget(self.gen_100_button)
		self.gen_1000_button = QtWidgets.QPushButton(self.centralwidget)
		self.gen_1000_button.setObjectName("gen_1000_button")
		self.horizontalLayout_2.addWidget(self.gen_1000_button)
		self.verticalLayout_2.addLayout(self.horizontalLayout_2)
		self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_5.setObjectName("horizontalLayout_5")
		self.gen_manual_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.gen_manual_input.sizePolicy().hasHeightForWidth())
		self.gen_manual_input.setSizePolicy(sizePolicy)
		self.gen_manual_input.setObjectName("gen_manual_input")
		self.horizontalLayout_5.addWidget(self.gen_manual_input)
		self.generate_button = QtWidgets.QPushButton(self.centralwidget)
		self.generate_button.setEnabled(False)
		self.generate_button.setObjectName("generate_button")
		self.horizontalLayout_5.addWidget(self.generate_button)
		self.horizontalLayout_5.setStretch(0, 7)
		self.horizontalLayout_5.setStretch(1, 3)
		self.verticalLayout_2.addLayout(self.horizontalLayout_5)
		self.invalid_images_amount_error = QtWidgets.QLabel(self.centralwidget)
		font = QtGui.QFont()
		font.setBold(True)
		font.setWeight(75)
		self.invalid_images_amount_error.setFont(font)
		self.invalid_images_amount_error.setStyleSheet("QLabel { color : red; }")
		self.invalid_images_amount_error.setText("")
		self.invalid_images_amount_error.setObjectName("invalid_images_amount_error")
		self.verticalLayout_2.addWidget(self.invalid_images_amount_error)
		spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
		self.verticalLayout_2.addItem(spacerItem4)
		self.label_8 = QtWidgets.QLabel(self.centralwidget)
		self.label_8.setObjectName("label_8")
		self.verticalLayout_2.addWidget(self.label_8)
		self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_6.setObjectName("horizontalLayout_6")
		self.image_path_input = QtWidgets.QPlainTextEdit(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.image_path_input.sizePolicy().hasHeightForWidth())
		self.image_path_input.setSizePolicy(sizePolicy)
		self.image_path_input.setReadOnly(True)
		self.image_path_input.setObjectName("image_path_input")
		self.horizontalLayout_6.addWidget(self.image_path_input)
		self.image_output_browse = QtWidgets.QPushButton(self.centralwidget)
		self.image_output_browse.setObjectName("image_output_browse")
		self.horizontalLayout_6.addWidget(self.image_output_browse)
		self.horizontalLayout_6.setStretch(0, 7)
		self.horizontalLayout_6.setStretch(1, 3)
		self.verticalLayout_2.addLayout(self.horizontalLayout_6)
		self.invalid_output_dir_error = QtWidgets.QLabel(self.centralwidget)
		font = QtGui.QFont()
		font.setBold(True)
		font.setWeight(75)
		self.invalid_output_dir_error.setFont(font)
		self.invalid_output_dir_error.setStyleSheet("QLabel { color : red; }")
		self.invalid_output_dir_error.setText("")
		self.invalid_output_dir_error.setObjectName("invalid_output_dir_error")
		self.verticalLayout_2.addWidget(self.invalid_output_dir_error)
		spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
		self.verticalLayout_2.addItem(spacerItem5)
		self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_12.setObjectName("horizontalLayout_12")
		self.label_4 = QtWidgets.QLabel(self.centralwidget)
		self.label_4.setObjectName("label_4")
		self.horizontalLayout_12.addWidget(self.label_4)
		self.file_progress = QtWidgets.QLabel(self.centralwidget)
		self.file_progress.setAlignment(QtCore.Qt.AlignCenter)
		self.file_progress.setObjectName("file_progress")
		self.horizontalLayout_12.addWidget(self.file_progress)
		self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
		self.progressBar.setProperty("value", 0)
		self.progressBar.setObjectName("progressBar")
		self.horizontalLayout_12.addWidget(self.progressBar)
		self.horizontalLayout_12.setStretch(0, 2)
		self.horizontalLayout_12.setStretch(1, 1)
		self.horizontalLayout_12.setStretch(2, 9)
		self.verticalLayout_2.addLayout(self.horizontalLayout_12)
		spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
		self.verticalLayout_2.addItem(spacerItem6)
		self.horizontalLayout.addLayout(self.verticalLayout_2)
		self.verticalLayout = QtWidgets.QVBoxLayout()
		self.verticalLayout.setObjectName("verticalLayout")
		self.shown_image = QtWidgets.QLabel(self.centralwidget)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.shown_image.sizePolicy().hasHeightForWidth())
		self.shown_image.setSizePolicy(sizePolicy)
		self.shown_image.setText("")
		self.shown_image.setScaledContents(True)
		self.shown_image.setAlignment(QtCore.Qt.AlignCenter)
		self.shown_image.setObjectName("shown_image")
		self.verticalLayout.addWidget(self.shown_image)
		self.horizontalLayout.addLayout(self.verticalLayout)
		self.horizontalLayout.setStretch(0, 5)
		self.horizontalLayout.setStretch(1, 5)
		MainWindow.setCentralWidget(self.centralwidget)

		self.setup_function_connects()

		self.retranslateUi(MainWindow)
		QtCore.QMetaObject.connectSlotsByName(MainWindow)
		MainWindow.setTabOrder(self.filename_input, self.filename_browse)
		MainWindow.setTabOrder(self.filename_browse, self.layer_dropdown)
		MainWindow.setTabOrder(self.layer_dropdown, self.density_mean_input)
		MainWindow.setTabOrder(self.density_mean_input, self.density_stddev_input)
		MainWindow.setTabOrder(self.density_stddev_input, self.size_mean_input)
		MainWindow.setTabOrder(self.size_mean_input, self.size_stddev_input)
		MainWindow.setTabOrder(self.size_stddev_input, self.vertices_input)
		MainWindow.setTabOrder(self.vertices_input, self.angle_variance_input)
		MainWindow.setTabOrder(self.angle_variance_input, self.curviness_input)
		MainWindow.setTabOrder(self.curviness_input, self.blur_input)
		MainWindow.setTabOrder(self.blur_input, self.preview_button)
		MainWindow.setTabOrder(self.preview_button, self.clear_preview_button)
		MainWindow.setTabOrder(self.clear_preview_button, self.toggle_accuracy_button)
		MainWindow.setTabOrder(self.toggle_accuracy_button, self.toggle_bbox_button)
		MainWindow.setTabOrder(self.toggle_bbox_button, self.gen_1_button)
		MainWindow.setTabOrder(self.gen_1_button, self.gen_5_button)
		MainWindow.setTabOrder(self.gen_5_button, self.gen_10_button)
		MainWindow.setTabOrder(self.gen_10_button, self.gen_100_button)
		MainWindow.setTabOrder(self.gen_100_button, self.gen_1000_button)
		MainWindow.setTabOrder(self.gen_1000_button, self.gen_manual_input)
		MainWindow.setTabOrder(self.gen_manual_input, self.generate_button)
		MainWindow.setTabOrder(self.generate_button, self.image_path_input)
		MainWindow.setTabOrder(self.image_path_input, self.image_output_browse)

	def retranslateUi(self, MainWindow):
		_translate = QtCore.QCoreApplication.translate
		MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
		self.label_3.setText(_translate("MainWindow", "Select input file"))
		self.filename_input.setPlaceholderText(_translate("MainWindow", "Path to source image"))
		self.filename_browse.setText(_translate("MainWindow", "Browse"))
		self.label_5.setText(_translate("MainWindow", "Select defect input"))
		self.label_14.setText(_translate("MainWindow", "Input parameters"))
		self.label_15.setText(_translate("MainWindow", "Layer"))
		self.label_13.setText(_translate("MainWindow", "Density"))
		self.density_mean_input.setPlaceholderText(_translate("MainWindow", "standard mean"))
		self.density_stddev_input.setPlaceholderText(_translate("MainWindow", "standard deviation"))
		self.label_16.setText(_translate("MainWindow", "Size"))
		self.size_mean_input.setPlaceholderText(_translate("MainWindow", "standard mean"))
		self.size_stddev_input.setPlaceholderText(_translate("MainWindow", "standard deviation"))
		self.label_17.setText(_translate("MainWindow", "Vertices"))
		self.vertices_input.setPlaceholderText(_translate("MainWindow", "amount of vertices"))
		self.label.setText(_translate("MainWindow", "Angle variance"))
		self.angle_variance_input.setPlaceholderText(_translate("MainWindow", "percentage between 0.0 and 100.0"))
		self.label_18.setText(_translate("MainWindow", "Curviness"))
		self.curviness_input.setPlaceholderText(_translate("MainWindow", "0.0 to 100.0"))
		self.label_19.setText(_translate("MainWindow", "Blur"))
		self.blur_input.setPlaceholderText(_translate("MainWindow", "percentage between 0.0 and 100.0"))
		self.label_2.setText(_translate("MainWindow", "Color"))
		self.label_6.setText(_translate("MainWindow", "Preview"))
		self.preview_button.setText(_translate("MainWindow", "Preview"))
		self.clear_preview_button.setText(_translate("MainWindow", "Clear"))
		self.toggle_accuracy_button.setText(_translate("MainWindow", "Accurate"))
		self.toggle_bbox_button.setText(_translate("MainWindow", "Bbox"))
		self.label_7.setText(_translate("MainWindow", "Image Generation"))
		self.gen_1_button.setText(_translate("MainWindow", "1"))
		self.gen_5_button.setText(_translate("MainWindow", "5"))
		self.gen_10_button.setText(_translate("MainWindow", "10"))
		self.gen_100_button.setText(_translate("MainWindow", "100"))
		self.gen_1000_button.setText(_translate("MainWindow", "1000"))
		self.gen_manual_input.setPlaceholderText(_translate("MainWindow", "Enter custom amount to generate"))
		self.generate_button.setText(_translate("MainWindow", "Generate"))
		self.label_8.setText(_translate("MainWindow", "Output image file directory"))
		self.image_path_input.setPlaceholderText(_translate("MainWindow", "Path to image output directory"))
		self.image_output_browse.setText(_translate("MainWindow", "Browse"))
		self.label_4.setText(_translate("MainWindow", "Image generation progress"))
		self.file_progress.setText(_translate("MainWindow", "0 / 0"))

	def setup_function_connects(self):
		# Connect filename browse button to function
		self.filename_browse.clicked.connect(self.browse_input_files)
		# Connect preview defect generation button to function
		self.preview_button.clicked.connect(self.generate_preview)
		# Connect clear preview to function
		self.clear_preview_button.clicked.connect(self.clear_preview)
		# Connect toggle accuarcy/speed to function
		self.toggle_accuracy_button.clicked.connect(self.toggle_accuracy)
		# Connect generate image button to function
		self.generate_button.clicked.connect(self.generate_images)

		self.color_input.clicked.connect(self.open_color_dialog)
		
		self.gen_1_button.clicked.connect(lambda: self.input_amount_gen(1))
		self.gen_5_button.clicked.connect(lambda: self.input_amount_gen(5))
		self.gen_10_button.clicked.connect(lambda: self.input_amount_gen(10))
		self.gen_100_button.clicked.connect(lambda: self.input_amount_gen(100))
		self.gen_1000_button.clicked.connect(lambda: self.input_amount_gen(1000))

		self.image_output_browse.clicked.connect(self.browse_output_dir)

	def toggle_accuracy(self):
		if self.toggle_accuracy_button.text() == "Accurate":
			self.toggle_accuracy_button.setText("Fast")
		else:
			self.toggle_accuracy_button.setText("Accurate")


	def browse_input_files(self):
		filename = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "Select Input Image", ".", "*.svg")[0]
		if filename != "":
			self.path_to_input_image = filename
			self.filename_input.setText(self.path_to_input_image)
			self.preview_button.setEnabled(True)
			try:
				self.shown_image.setPixmap(QtGui.QPixmap(self.path_to_input_image))
			except Exception:
				print("Unable to read or open the selected image")
				return
			
			layers = reader.get_layers(self.path_to_input_image)
			self.layer_dropdown.clear()
			self.layer_dropdown.insertItems(0, layers)
	
	def open_color_dialog(self):
		color = QtWidgets.QColorDialog.getColor(initial=self.color_input.palette().button().color())
		if color.isValid():
			self.color_input.setStyleSheet("background-color:" + color.name() +";")
		

	def generate_preview(self):
		if self.check_parameters():
			self.area = reader.get_area_of_layer(self.path_to_input_image, self.layer_dropdown.currentText())
			defect = particle_defect.Defect(srcImg=self.path_to_input_image, 
								area=self.area, 
								density_mean=self.density_mean_value, density_stddev=self.density_stddev_value,
								size_mean=self.size_mean_value, size_stddev=self.size_stddev_value,
								vertices=self.vertices_value, angle_variance=self.angle_variance_value,
								curviness=self.curviness_value, 
								blur=self.blur_value, layer=self.layer_dropdown.currentText(), color=self.color_input.palette().button().color().name())
			if self.toggle_accuracy_button.text() == "Fast":
				svg_img = QtGui.QPixmap()
				svg_img.loadFromData(QtCore.QByteArray(defect.preview_image_svg(self.toggle_bbox_button.isChecked())), "svg")
				self.shown_image.setPixmap(svg_img)
			else:
				png_img = QtGui.QPixmap()
				png_img.loadFromData(defect.preview_image_png(self.toggle_bbox_button.isChecked()), "png")
				self.shown_image.setPixmap(png_img)
			self.clear_preview_button.setEnabled(True)

	def generate_images(self):
		if self.check_parameters():
			amount = self._get_amount_to_gen()
			if amount > 0 and self.image_out_dir != "":
				if not self.image_out_dir.endswith("/"):
					self.image_out_dir += "/"
				csv_out_file = reader.get_first_csv_file(self.image_out_dir)
				self.progressBar.setMaximum(amount)
				self.progressBar.setValue(0)
				self.file_progress.setText("0 / " + str(amount))
				self.area = reader.get_area_of_layer(self.path_to_input_image, self.layer_dropdown.currentText())
				config = (self.path_to_input_image, self.area, 
						self.density_mean_value, self.density_stddev_value,
						self.size_mean_value, self.size_stddev_value,
						self.vertices_value, self.angle_variance_value,
						self.curviness_value, self.blur_value, 
						self.layer_dropdown.currentText())

				mp = MultiProcessor(particle_defect.Defect, config, amount, self.image_out_dir, csv_out_file)
				start_time = time.time()
				mp.run(self.progressBar, self.file_progress)
				end_time = time.time()
				print(end_time - start_time)
				print("Generation done")

	def _get_amount_to_gen(self):
		amount = 0
		try:
			self.invalid_images_amount_error.setText("")
			amount = int(self.gen_manual_input.toPlainText())
			if amount <= 0:
				raise Exception
		except Exception:
			self.invalid_images_amount_error.setText("Unable to get the number of wanted images")
		return amount

	def browse_output_dir(self):
		try:
			self.invalid_output_dir_error.setText("")
			directory = QtWidgets.QFileDialog.getExistingDirectory(self.centralwidget, "Select Output directory", ".")
			if directory != "":
				self.image_out_dir = directory
				self.image_path_input.setPlainText(self.image_out_dir)
				self.generate_button.setEnabled(True)
		except Exception: 
			self.image_out_dir = ""
			self.invalid_output_dir_error.setText("Unable to select output directory")
			self.generate_button.setEnabled(False)

	def input_amount_gen(self, amount):
		self.gen_manual_input.setPlainText(str(amount))

	def check_parameters(self):
		try:
			density_mean_value = float(self.density_mean_input.toPlainText())
			if density_mean_value > 0:
				self.density_mean_value = density_mean_value
			else:
				raise Exception()
		except Exception:
			self.invalid_parameters_error.setText("Invalid density mean")
			return False
		try:
			density_stddev_value = float(self.density_stddev_input.toPlainText())
			if density_stddev_value >= 0:
				self.density_stddev_value = density_stddev_value
			else:
				raise Exception()
		except Exception:
			self.invalid_parameters_error.setText("Invalid density mean")
			return False
		try:
			size_mean_value = float(self.size_mean_input.toPlainText())
			if size_mean_value > 0:
				self.size_mean_value = size_mean_value
			else:
				raise Exception()
		except Exception:
			self.invalid_parameters_error.setText("Invalid size mean")
			return False
		try:
			size_stddev_value = float(self.size_stddev_input.toPlainText())
			if size_stddev_value >= 0:
				self.size_stddev_value = size_stddev_value
			else:
				raise Exception()
		except Exception:
			self.invalid_parameters_error.setText("Invalid size stddev")
			return False
		try:
			vertices_value = int(self.vertices_input.toPlainText())
			if vertices_value > 0: 
				self.vertices_value = vertices_value
			else:
				raise Exception()
		except Exception:
			self.invalid_parameters_error.setText("Invalid amount of vertices")
			return False
		try:
			angle_variance_value = float(self.angle_variance_input.toPlainText())
			if angle_variance_value >= 0:
				self.angle_variance_value = angle_variance_value
			else:
				raise Exception()
		except Exception:
			self.invalid_parameters_error.setText("Invalid angle variance")
			return False
		try:
			curviness_value = float(self.curviness_input.toPlainText())
			if 100 >= curviness_value >= 0:
				self.curviness_value = curviness_value
			else:
				raise Exception()
		except Exception:
			self.invalid_parameters_error.setText("Invalid curviness")
			return False
		try:
			blur_value = float(self.blur_input.toPlainText())
			if 100 >= blur_value >= 0:
				self.blur_value = blur_value
			else:
				raise Exception()
		except Exception:
			self.invalid_parameters_error.setText("Invalid blur")
			return False
		self.invalid_parameters_error.setText("")
		return True

	def clear_preview(self):
		try:
			self.shown_image.setPixmap(QtGui.QPixmap(self.path_to_input_image))
			self.clear_preview_button.setEnabled(False)
		except Exception:
			print("Unable to read or open the selected image")

if __name__ == "__main__":
	import sys
	app = QtWidgets.QApplication(sys.argv)
	MainWindow = QtWidgets.QMainWindow()
	ui = Ui_MainWindow()
	ui.setupUi(MainWindow)
	MainWindow.show()
	sys.exit(app.exec_())
